
= Dot primitive as in Clojure (current implementation is a hack)
- Nested let
- set! acting on Variable
- list as PersistentList
- vectors as PersistentVector
- [1 2 3] is macro (vector 1 2 3) ???
- implements PersistentMap
- Variable implementation with multithreading support, thread local storage for values
- Namespaces management in ValueEnvironment
- Should implement "Locals created with let are not variables. Once created their values never change!"
- "(var symbol)
The symbol must resolve to a var, and the Var object itself (not its value) is returned. The reader macro #'x expands to (var x)."
- "(new Classname args*)
can be written
(Classname. args*) ;note trailing dot"
- Multiarity in fn*
- Improve NewPrimitive, Utilities to locate type name
- Macros

- Var implementation
	- Per machine and thread
	- Root value
	- Lookup of Symbols

- Sets in lexer, parser, language
A set is a collection containing no duplicate items. Clojure has two set types:

    * a hash set is implemented as a hashmap and so has (near) constant lookup, insertion, and removal times.
    * a sorted set is implemented as a linked list and so has linear lookup, insertion, and removal times.
    
- StructMaps

- Dispatch macro #
	- #{} sets
	- #".." regexp
	- #^ metadata
	- #'x (var x)
	
- let with redefinition [x ... y ... x <again>... ]