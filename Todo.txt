
= Dot primitive as in Clojure
- defn review commented code in definition DefCoreWithTests.ajshp
- core.clj implement lines 246-275 (from cast to sorted-map-by)
- review Variable.SetMacro implementation (now it receives Machine parameter)
- related to above: Machine.SetValue("machine",this) is it needed????
- internal test Variable.SetMacro
- internal test Utilities.Identical
- define map? in CoreWithTest example
- duplicated keys in maps
{:a 1 :b 2 :a 3} => {:a 1 :b 2 :a 3} 
- BaseSequence equals to IEnumerable but with different hash code 
	(in clojure ASeq vs List?)
- Nested let
- set! acting on Variable
- list as PersistentList
- vectors as PersistentVector
- [1 2 3] is macro (vector 1 2 3) ???
= implements PersistentMap
- Variable implementation with multithreading support, thread local storage for values
- Namespaces management in ValueEnvironment
= Should implement "Locals created with let are not variables. Once created their values never change!"
+ "(var symbol)
The symbol must resolve to a var, and the Var object itself (not its value) is returned. The reader macro #'x expands to (var x)."
+ "(new Classname args*)
can be written
(Classname. args*) ;note trailing dot"
- Multiarity in fn*
- Improve NewPrimitive, Utilities to locate type name
= Macros

- Change of namespace (ns...)
- Import of CLR type

- Refactor DefinedFunction, DefinedMacro, it could be a unique class

- Var implementation
	- Per machine and thread
	- Root value
	- Lookup of Symbols

- Sets in lexer, parser, language
A set is a collection containing no duplicate items. Clojure has two set types:

    * a hash set is implemented as a hashmap and so has (near) constant lookup, insertion, and removal times.
    * a sorted set is implemented as a linked list and so has linear lookup, insertion, and removal times.
    
- StructMaps

- Dispatch macro #
	- #{} sets
	- #".." regexp
	+ #^ metadata
	+ #'x (var x)
	
+ let with redefinition [x ... y ... x <again>... ]