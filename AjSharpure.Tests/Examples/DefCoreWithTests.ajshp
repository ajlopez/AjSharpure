; list already defined in Machine

(def
 cons (fn* cons [x seq] (. AjSharpure.Operations Cons x seq)))

;during bootstrap we don't have destructuring let, loop or fn, will redefine later
(def
 #^{:macro true}
  let (fn* let [& decl] (cons 'let* decl)))

(def
 #^{:macro true}
 loop (fn* loop [& decl] (cons 'loop* decl)))

(def
 #^{:macro true}
 fn (fn* fn [& decl] (cons 'fn* decl)))

(def
 #^{:arglists '([coll])
    :doc "Returns the first item in the collection. Calls seq on its
    argument. If coll is nil, returns nil."}
 first (fn first [coll] (. AjSharpure.Operations (First coll))))

(def
 #^{:arglists '([coll])
    :tag clojure.lang.ISeq
    :doc "Returns a seq of the items after the first. Calls seq on its
  argument.  If there are no more items, returns nil."}  
 next (fn next [x] (. AjSharpure.Operations (Next x))))

(def
 #^{:arglists '([coll])
    :tag clojure.lang.ISeq
    :doc "Returns a possibly empty seq of the items after the first. Calls seq on its
  argument."}  
 rest (fn rest [x] (. AjSharpure.Operations (More x))))

(= (rest (list 1 2 3)) '(2 3))

(def
 #^{:arglists '([coll x] [coll x & xs])
    :doc "conj[oin]. Returns a new collection with the xs
    'added'. (conj nil item) returns (item).  The 'addition' may
    happen at different 'places' depending on the concrete type."}
 conj (fn conj 
        ([coll x] (. AjSharpure.Operations (Conj coll x)))
        ([coll x & xs]
         (if xs
           (recur (conj coll x) (first xs) (next xs))
           (conj coll x)))))
           
(= (list 1 2 3 4) (conj (list 2 3 4) 1))
(= [1 2 3 4] (conj [1 2 3] 4))

(def
 #^{:doc "Same as (first (next x))"
    :arglists '([x])}
 second (fn second [x] (first (next x))))

(= (list 1 2 3) (cons 1 (list 2 3)))
(= 1 (first (list 1 2 3)))
(= 2 (second (list 1 2 3)))

(= 1 (first [1 2 3]))
(= 2 (second [1 2 3]))

(def
 #^{:doc "Same as (first (first x))"
    :arglists '([x])}
 ffirst (fn ffirst [x] (first (first x))))

(= 1 (ffirst (list (list 1) 2 3)))

(= 1 (ffirst [[1] 2 3]))

(def
 #^{:doc "Same as (next (first x))"
    :arglists '([x])}
 nfirst (fn nfirst [x] (next (first x))))

(= (list 2) (nfirst (list (list 1 2) 2 3)))

(= [2] (nfirst [[1 2] 2 3]))

(def
 #^{:doc "Same as (first (next x))"
    :arglists '([x])}
 fnext (fn fnext [x] (first (next x))))

(= 2 (fnext (list 1 2 3)))

(= 2 (fnext [1 2 3]))

(def
 #^{:doc "Same as (next (next x))"
    :arglists '([x])}
 nnext (fn nnext [x] (next (next x))))

(= (list 3) (nnext (list 1 2 3)))

(= [3] (nnext [1 2 3]))

(def
 #^{:arglists '([coll])
    :doc "Returns a seq on the collection. If the collection is
    empty, returns nil.  (seq nil) returns nil. seq also works on
    Strings, native Java arrays (of reference types) and any objects
    that implement Iterable."
    :tag clojure.lang.ISeq}
 seq (fn seq [coll] (. AjSharpure.Utilities (ToSequence coll))))

(= '(1 2 3) (seq (list 1 2 3)))

(= '(1 2 3) (seq [1 2 3]))

(= '(\f \o \o) (seq "foo"))

(def
 #^{:arglists '([#^Class c x])
    :doc "Evaluates x and tests if it is an instance of the class
    c. Returns true or false"}
 instance? (fn instance? [#^Class c x] (. c (IsInstanceOfType x))))
 
(instance? System.Int32 18)
 
(def
 #^{:arglists '([x])
    :doc "Return true if x implements ISeq"}
 seq? (fn seq? [x] (instance? AjSharpure.Language.ISequence x)))

(seq? (seq (list 1 2 3)))

(def
 #^{:arglists '([x])
    :doc "Return true if x is a String"}
 string? (fn string? [x] (instance? System.String x)))

(string? "foo")

(def
 #^{:arglists '([x])
    :doc "Return true if x implements IPersistentMap"}
 map? (fn map? [x] (instance? AjSharpure.Language.IPersistentMap x)))
 
(map? {:a 1 :b 2})

(def
 #^{:arglists '([x])
    :doc "Return true if x implements IPersistentVector "}
 vector? (fn vector? [x] (instance? AjSharpure.Language.IPersistentVector x)))
 
(vector? [1 2 3])

(vector? (vector 1 2 3))
 
(def
 #^{:private true}
 sigs
 (fn [fdecl]
   (if (seq? (first fdecl))
     (loop [ret [] fdecl fdecl]
       (if fdecl
         (recur (conj ret (first (first fdecl))) (next fdecl))
         (seq ret)))
     (list (first fdecl)))))

(def
 #^{:arglists '([map key val] [map key val & kvs])
    :doc "assoc[iate]. When applied to a map, returns a new map of the
    same (hashed/sorted) type, that contains the mapping of key(s) to
    val(s). When applied to a vector, returns a new vector that
    contains val at index. Note - index must be <= (count vector)."}
 assoc
 (fn assoc
   ([map key val] (. AjSharpure.Operations (Associate map key val)))
   ([map key val & kvs]
    (let [ret (assoc map key val)]
      (if kvs
        (recur ret (first kvs) (second kvs) (nnext kvs))
        ret)))))

(= {:a 1 :b 2 :c 3} (assoc {:a 1 :b 2} :c 3))

;;;;;;;;;;;;;;;;; metadata ;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def
 #^{:arglists '([obj])
    :doc "Returns the metadata of obj, returns nil if there is no metadata."}
 meta (fn meta [x]
        (if (instance? AjSharpure.Language.IMetadata x)
          (. #^AjSharpure.Language.IMetadata x (Metadata)))))
          
(= nil (meta 1))          

(def
 #^{:arglists '([#^AjSharpure.Language.IObject obj m])
    :doc "Returns an object of the same type and value as obj, with
    map m as its metadata."}
 with-meta (fn with-meta [#^AjSharpure.Language.IObject x m]
             (. x (WithMetadata m))))

(= (list 1 2) (with-meta (list 1 2) nil))

(= {:a 1 :b 2} (meta (with-meta (list 1 2) {:a 1 :b 2})))

(def 
 #^{:arglists '([coll])
    :doc "Return the last item in coll, in linear time"}
 last (fn last [s]
        (if (next s)
          (recur (next s))
          (first s))))
          
(= 3 (last (list 1 2 3)))

(def 
 #^{:arglists '([coll])
    :doc "Return a seq of all but the last item in coll, in linear time"}
 butlast (fn butlast [s]
           (loop [ret [] s s]
             (if (next s)
               (recur (conj ret (first s)) (next s))
               (seq ret)))))

(= (list 1 2) (butlast (list 1 2 3)))

(def 

 #^{:macro true
    :doc "Same as (def name (fn [params* ] exprs*)) or (def
    name (fn ([params* ] exprs*)+)) with any doc-string or attrs added
    to the var metadata"
    :arglists '([name doc-string? attr-map? [params*] body]
                [name doc-string? attr-map? ([params*] body)+ attr-map?])}
 defn (fn defn [name & fdecl]
        (let [m (if (string? (first fdecl))
                  {:doc (first fdecl)}
                  {})
              fdecl (if (string? (first fdecl))
                      (next fdecl)
                      fdecl)
              m (if (map? (first fdecl))
                  (conj m (first fdecl))
                  m)
              fdecl (if (map? (first fdecl))
                      (next fdecl)
                      fdecl)
;              fdecl (if (vector? (first fdecl))
;                      (list fdecl)
;                      fdecl)
              m (if (map? (last fdecl))
                  (conj m (last fdecl))
                  m)
              fdecl (if (map? (last fdecl))
                      (butlast fdecl)
                      fdecl)
              m (conj {:arglists (list 'quote (sigs fdecl))} m)]
          (list 'def (with-meta name (conj (if (meta name) (meta name) {}) m))
                (cons `fn fdecl)))))
 
(defn cast
  "Throws a ClassCastException if x is not a c, else returns x."
  [#^Class c x] 
  (. c (cast x)))

(defn to-array
  "Returns an array of Objects containing the contents of coll, which
  can be any Collection.  Maps to java.util.Collection.toArray()."
  {:tag "[LSystem.Object;"}
  [coll] (. AjSharpure.Utilities (ToArray coll)))
  
(instance? System.Array (to-array (list 1 2 3)))

(defn
 newfirst [coll] (. AjSharpure.Operations (First coll)))

(= 1 (newfirst (list 1 2 3 4)))

(def

 #^{:macro true
    :doc "Like defn, but the resulting function name is declared as a
  macro and will be used as a macro by the compiler when it is
  called."
    :arglists '([name doc-string? attr-map? [params*] body]
                [name doc-string? attr-map? ([params*] body)+ attr-map?])}
 defmacro (fn [name & args]
            (list 'do
                  (cons `defn (cons name args))
                  (list '. (list 'var name) '(SetMacro (current-machine)))
                  (list 'var name))))

(defmacro when
  "Evaluates test. If logical true, evaluates body in an implicit do."
  [test & body]
  (list 'if test (cons 'do body)))

(= 1 (when true 1))
(= nil (when false 1))

(defmacro when-not
  "Evaluates test. If logical false, evaluates body in an implicit do."
  [test & body]
    (list 'if test nil (cons 'do body)))

(= nil (when-not true 1))
(= 1 (when-not false 1))

(defn
 identical? [x y] (. AjSharpure.Utilities Identical x y))
 
(= true (identical? true true))
(= true (identical? 1 1))
(= true (identical? nil nil))
(= false (identical? 1 2))
(= false (identical? false true))

(defn nil?
  "Returns true if x is nil, false otherwise."
  {:tag Boolean}
  [x] (identical? x nil))

(= false (nil? 1))
(nil? nil)

(defn false?
  "Returns true if x is the value false, false otherwise."
  {:tag Boolean}
  [x] (identical? x false))
  
(false? false)
(= false (false? true))

(defn true?
  "Returns true if x is the value true, false otherwise."
  {:tag Boolean}
  [x] (identical? x true))

(true? true)
(= false (true? false))
(= false (true? 1))

(defn not
  "Returns true if x is logical false, false otherwise."
  {:tag Boolean}
  [x] (if x false true))

(not false)
(not (not true))
(= false (not true))

(defn str
  "With no args, returns the empty string. With one arg x, returns
  x.toString().  (str nil) returns the empty string. With more than
  one arg, returns the concatenation of the str values of the args."
  {:tag System.String}
  ([] "")
  ([#^System.Object x]
   (if (nil? x) "" (. x (ToString))))
  ([x & ys]
     ((fn [#^System.Text.StringBuilder sb more]
          (if more
            (recur (. sb  (Append (str (first more)))) (next more))
            (str sb)))
      (new System.Text.StringBuilder #^System.String (str x)) ys)))

(= "" (str))
(= "foo" (str "foo"))
(= "123" (str 123))
(= "foobar" (str "foo" "bar"))
(= "foobarandmore" (str "foo" "bar" "and" "more"))

(defn symbol?
  "Return true if x is a Symbol"
  [x] (instance? AjSharpure.Language.Symbol x))
  
(symbol? (. AjSharpure.Language.Symbol (Create "foo")))
(symbol? (. AjSharpure.Language.Symbol (Create "ns" "foo")))

(defn keyword?
  "Return true if x is a Keyword"
  [x] (instance? AjSharpure.Language.Keyword x))

(keyword? (. AjSharpure.Language.Keyword (Create "foo")))
(keyword? (. AjSharpure.Language.Keyword (Create "ns" "foo")))
(keyword? :foo)

(defn symbol
  "Returns a Symbol with the given namespace and name."
  ([name] (if (symbol? name) name (. AjSharpure.Language.Symbol (Create name))))
  ([ns name] (. AjSharpure.Language.Symbol (Create ns name))))

(symbol? (symbol "foo"))
(symbol? (symbol "ns" "foo"))
(= "foo" (. (symbol "foo") Name))

(defn keyword
  "Returns a Keyword with the given namespace and name.  Do not use :
  in the keyword strings, it will be added automatically."
  ([name] (if (keyword? name) name (. AjSharpure.Language.Keyword (Create nil name))))
  ([ns name] (. AjSharpure.Language.Keyword (Create ns name))))

(keyword? (keyword "foo"))
(keyword? (keyword "ns" "foo"))
(= "foo" (. (keyword "foo") Name))
(= ":foo" (str (keyword "foo")))

(defn gensym
  "Returns a new symbol with a unique name. If a prefix string is
  supplied, the name is prefix# where # is some unique number. If
  prefix is not supplied, the prefix is 'G__'."
  ([] (gensym "G__"))
  ([prefix-string] (. AjSharpure.Language.Symbol (Create (str prefix-string (str (. AjSharpure.Operations NextId)))))))

(symbol? (gensym))
(not (= (gensym) (gensym)))

(defmacro cond
  "Takes a set of test/expr pairs. It evaluates each test one at a
  time.  If a test returns logical true, cond evaluates and returns
  the value of the corresponding expr and doesn't evaluate any of the
  other tests or exprs. (cond) returns nil."
  [& clauses]
    (when clauses
      (list 'if (first clauses)
            (if (next clauses)
                (second clauses)
                (throw (new System.IllegalArgumentException
                         "cond requires an even number of forms")))
            (cons 'AjSharpure.Core/cond (next (next clauses))))))

(cond (string? "foo") true)
(= 2 (cond (string? 1) 1 (keyword? :foo) 2))
(= 3 (cond (nil? 1) 1 (string? 2) 2 (keyword? :foo) 3))

(defn spread
  {:private true}
  [arglist]
  (cond
   (nil? arglist) nil
   (nil? (next arglist)) (seq (first arglist))
   true (cons (first arglist) (spread (next arglist)))))

(nil? (spread nil))
(= (seq (list 1)) (spread (list (list 1))))
(= '(1) (spread '((1))))
(= '((1) 2 3) (spread '((1) (2 3))))
(= '((1) (2) 3 4) (spread '((1) (2) (3 4))))
(= '(1 2 3 4) (spread '(1 2 (3 4))))

(defn apply
  "Applies fn f to the argument list formed by prepending args to argseq."
  {:arglists '([f args* argseq])}
  [#^AjSharpure.Language.IFunction f & args]
    (. f (Apply (current-machine) (current-environment) (to-array (spread args)))))

(= (list 1 2 3) (apply list '(1 2 3)))

(defn vary-meta
 "Returns an object of the same type and value as obj, with
  (apply f (meta obj) args) as its metadata."
 [obj f & args]
  (with-meta obj (apply f (meta obj) args)))
  
;TODO vary-meta test

(defn list*
  "Creates a new list containing the item prepended to more."
  [item & more]
    (spread (cons item more)))

(= '(1 2 3) (list* 1 '(2 3)))
(= '(1 2 3 4) (list* 1 2 '(3 4)))

;TODO implement :once true semantic
(defmacro lazy-seq
  "Takes a body of expressions that returns an ISeq or nil, and yields
  a Seqable object that will invoke the body only the first time seq
  is called, and will cache the result and return it on all subsequent
  seq calls."  
  [& body]
  (list 'new 'AjSharpure.Language.LazySequence (list 'closure (list* '#^{:once true} fn* [] body))))

(instance? AjSharpure.Language.LazySequence (lazy-seq nil))
(instance? AjSharpure.Language.LazySequence (lazy-seq (list 1 2)))
(= 1 (first (lazy-seq (list 1 2))))
(= 2 (second (lazy-seq (list 1 2))))

(defn concat
  "Returns a lazy seq representing the concatenation of the elements in the supplied colls."
  ([] (lazy-seq nil))
  ([x] (lazy-seq x))
  ([x y]
     (lazy-seq
      (let [s (seq x)]
        (if s
          (cons (first s) (concat (rest s) y))
          y))))
  ([x y & zs]
     (let [cat (fn cat [xys zs]
                 (lazy-seq
                  (let [xys (seq xys)]
                    (if xys
                      (cons (first xys) (cat (rest xys) zs))
                      (when zs
                        (cat (first zs) (next zs)))))))]
           (cat (concat x y) zs))))

;TODO concat test

(= (list 1 2) (concat (list 1) (list 2)))

(= '(\f \o \o \b \a \r) (concat "foo" "bar"))